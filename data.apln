:Namespace data

    ⍝ data science for Dyalog APL
    ⍝ PROOF-OF-CONCEPT jgl@dyalog.com 2024

    debug←0

    MAXLINES←45
    SHADE←3

    :Class Series ⍝ labelled list

        :Field Public label←''
        :Field Public values←⍬

        ∇ Make0
          :Access Public
          :Implements Constructor
        ∇

        ∇ Make2(l v)
          :Access Public
          :Implements Constructor
          label values←l v
        ∇

        ⍝ format in a column with its label as header
        ⍝ repeated consecutive elements are replaced by a dot
        ⍝ also perform checks
        ∇ setseries;f
          :Implements Trigger label,values
          ⎕SIGNAL(1<≢⍴values)/4 ⍝ rank
          ⎕DF ¯1↓[⎕IO+1]⍕1(↑⍪'─'⍪↓)⍕(⊂,label)⍪⍪,values
          ⍝ update frames referencing this series
          :For f :In ⎕INSTANCES Frame
              {⎕THIS∊f.series:⍵.SHADE←⍵.SHADE}f
          :EndFor
        ∇

        ⍝ bracket indexing return values
        :Property Default default
        :Access Private
            ∇ r←get
              r←values
            ∇
            ∇ set arg
              values←arg.NewValue
            ∇
        :EndProperty

    :EndClass ⍝ Series

    :Class Frame ⍝ list of series of the same length

        :Field Public series←0⍴⎕NEW Series
        :Field Public MAXLINES←##.MAXLINES
        :Field Public SHADE←##.SHADE

        ∇ Make1 a
          :Access Public
          :Implements Constructor
          ⎕SIGNAL(1<≢⍴a)/4 ⍝ rank
          series←,a
          MAXLINES SHADE←##.(MAXLINES SHADE)
        ∇

        ⍝ set index function I and frame of each series
        ∇ setframe arg;f;⎕TRAP
          :Implements Trigger series,SHADE,MAXLINES
          :Access Private
          ⎕TRAP←(~##.debug)/⊂0 'C' '⎕SIGNAL⎕EN'
          :If 'series'≡arg.Name
              ⎕SIGNAL(~∧/series∊⎕INSTANCES ##.Series)/11 ⍝ domain
              ⎕SIGNAL(1<≢∪⍴∘⌷¨series.values)/6           ⍝ value
              I←series.label∘⍳{83≠⎕DR ⍵:⍺⍺⊂⍵ ⋄ ⍵}¨ ⍝ index function
          :EndIf
          f←1(↑⍪'─'⍪↓)⍕labels⍪⍉' '@(0,2≡/⊢)⍤1⍉'·'@(≡∘⍬¨)default[;]
          f←SHADE{0=⍺:⍵ ⋄ ↑'░'@(=∘' ')¨@((0=⍺|2-⍨⍳≢⍵)⍨)↓⍵}f
          ⎕DF MAXLINES{↑(⊂'…',⍕n-2),⍨⍣(n>⍺)↓(⍺⌊n←≢⍵)↑⍵}⍣(MAXLINES>0)⊢f
        ∇

        ⍝ bracket indexing rank-1 [] to return series
        ⍝ bracket indexing rank-2 [;] to return values
        :Property Keyed Default default
        :Access Private
            ∇ r←get arg;⎕TRAP
              ⎕TRAP←(~##.debug)/⊂0 'C' '⎕SIGNAL⎕EN'
              :Select ≢arg.Indexers
              :Case 1
                  r←gets arg
              :Case 2
                  r←(gets arg)getv arg
              :Else
                  ⎕SIGNAL 4
              :EndSelect
            ∇
            ∇ set arg;⎕TRAP
              ⎕TRAP←(~##.debug)/⊂0 'C' '⎕SIGNAL⎕EN'
              :Select ≢arg.Indexers
              :Case 1
                  sets arg
              :Case 2
                  (gets arg)setv arg
              :Else
                  ⎕SIGNAL 4
              :EndSelect
            ∇
        :EndProperty

        ⍝ helper fns to get/set series and values
        ais←{⍵.IndexersSpecified} ⋄ ai←{I⊃⌽⍵.Indexers}
        gets←{~⊃⌽ais⍵:series ⋄ series[ai⍵]}
        sets←{~⊃⌽ais⍵:series⊢←⍵.NewValue ⋄ series[ai⍵]←⍵.NewValue}
        aiv←{I⊃⍵.Indexers} ⋄ av←{↑[⎕IO]⍣(0<≢⍴⍺)⊢⍵}
        getv←{~⊃ais⍵:⍺av⍺.values ⋄ ⍺av⍺{⍺.values[⍵]}¨⊂aiv⍵}
          setv←{
              v←{↓[⎕IO]⍣(0<≢⍴⍵)⊢⍵}⍵.NewValue
              ~⊃ais ⍵:⍺.values←v ⋄ ⍺((aiv ⍵){⍺.values[⍺⍺]←⍵})¨v
          }

        :Property labels ⍝ ←→ df[].label
        :Access Public
            ∇ r←get
              r←series[].label
            ∇
            ∇ set arg
              series[].label←arg.NewValue
            ∇
        :EndProperty

        :Property values ⍝ ←→ df[;]
        :Access Public
            ∇ r←get
              r←{↑[⎕IO]⍣(0<≢⍴⍵)⊢⍵.values}series
            ∇
            ∇ set arg
              series[].values←{↓[⎕IO]⍣(1<≢⍴⍵)⊢⍵}arg.NewValue
            ∇
        :EndProperty

    :EndClass ⍝ Frame

    ⍝ return series or list of series
    ⍝ horizontal: concatenate series with ,
    ⍝ vertical: concatenate values with ⍪
    ∇ s←{l}series v;⎕TRAP
      ⎕TRAP←(~⎕THIS.debug)/⊂0 'C' '⎕SIGNAL⎕EN'
      ⎕SIGNAL(2<≢⍴v)/4 ⍝ rank
      :If 0≠⎕NC'l'
          ⎕SIGNAL(1<≢⍴v)/4 ⍝ rank
          l←{0::⍵ ⋄ ⍵.label}l
          s←⎕NEW Series(l v)
      :ElseIf 2=≢⍴v
          v←↑series¨↓v
          v←{∨/2≢/⍵.label:⎕SIGNAL 6 ⋄ ⍵}¨↓[⎕IO]v
          l←(⊃¨v).label ⋄ v←{⊃,/⍵[].values}¨v
          s←l{⎕NEW Series(⍺ ⍵)}¨v
      :Else
          v←⊃,/{2 6::⍵ ⋄ ⍵.series[]}¨v
          ⎕SIGNAL(~∧/v∊⎕INSTANCES Series)/6 ⍝ value
          s←{⎕NEW Series ⍵.(label values)}¨v
      :EndIf
    ∇

    ⍝ return frame from input to series or csv filename
    ∇ f←{l}frame v;⎕TRAP
      ⎕TRAP←(~⎕THIS.debug)/⊂0 'C' '⎕SIGNAL⎕EN'
      :If 0≠⎕NC'l'
          v←l{
              80≠⎕DR ⍵:↓[⎕IO]⍣(2=≢⍴⍵)⊢⍵
              b←⍺{∧/(⊃∘⊃∘⎕CLASS¨⍺)∊Series Frame}⍣(⊃9=⎕NC'⍺')⊢0
              ~b:⎕CSV⍠2⊢v'' 4 0
              lv←⍺[].values(⍺[].label)
              _←⍵⊣f⊢←lv ⎕CSV⍠2⍠'IfExists' 'Replace'⊢⍵
          }v
          :If 0=⎕NC'f'
              f←({0::⍵ ⋄ ⍵[].label}l){⎕NEW Series(⍺ ⍵)}¨v
              f←⎕NEW Frame f
              v←{0::⍬ ⋄ ⍵.(SHADE MAXLINES)←l.(SHADE MAXLINES)}f
          :EndIf
      :Else
          v←{
              80≠⎕DR ⍵:series ⍵
              {(v l)←⍵ ⋄ l{⎕NEW Series(⍺ ⍵)}¨v}⎕CSV⍠2⊢⍵'' 4 1
          }v
          f←⎕NEW Frame v
      :EndIf
    ∇

    ⍝ sort right argument by left argument
      sort←{
          ⎕TRAP←(~debug)/⊂0 'C' '⎕SIGNAL⎕EN'
          ⍺←⍵ ⋄ a←⍺{0::⍺ ⋄ ⍵[⍺]}⍵
          a←{4::{2::⍵ ⋄ ⍵.values}⍵ ⋄ ⍵[;]}a
          a←(⊂⍺⍺ a)⌷[⎕IO]{4::⍵[] ⋄ ⍵[;]}⍵
          a{2::⍵ ⋄ 6::⍵.label series ⍺ ⋄ ⍵.labels frame ⍺}⍵
      }

    ⍝ group by right operand and apply left operand
      by←{
          ⎕TRAP←(~debug)/⊂0 'C' '⎕SIGNAL⎕EN'
          unstack←{
              s←⍵[]~a b←⍺⍺ ⍵⍵{0::⍺ ⋄ ⍵[⊂⍺]}¨⊂⍵
              r←≢y←∪↑[⎕IO]s.values
              c←≢x←{⍵[⍋⍵]}∪b.values
              f←frame s,b a
              f←f frame((↑,y∘.,⊂¨x),⍤1⊢⍬⍨¨a)⍪f.values
              f←f.labels,⌿by(f[(s,b).label])⊢f[a.label]
              ⍺←⊢ ⋄ l←{0::⍵ ⋄ ⍵[].label}⍺⊣s.label,x
              l frame y,r c⍴f[;a.label]
          }
          ⍺←⊢ ⋄ v←frame⍣(~(⊂⍵)∊⎕INSTANCES Frame)⊢⍵
          (k v)←{3 11::⍵ v ⋄ (,v[⍵])((v[])~(v[⍵]))}⍵⍵
          3≠⎕NC'⍺⍺':⍺(⍺⍺ unstack ⍵⍵)⍵
          l←{2::⍬ ⋄ (,⍵).label}k
          (kv vv)←{0::{0::⍵ ⋄ (,⍵).values}⍵ ⋄ ⍵[].values}¨k v
          vv←⊃⍪/⊂⍤2⊢kv{⍺,⍤1⊢⍵}∘⍺⍺⌸⍥(↑[⎕IO])vv
          l←⍺{
              0::⎕SIGNAL 6 ⋄ 0=⎕NC'⍺':l,v.label
              (vl←⊃⌽⍴vv)=≢⍺:⍺ ⋄ vl=≢l,⍺:l,⍺ ⋄ l,v.label,⍺
          }v
          ⍋sort l frame vv
      }

    ⍝ join frames or data arrays in a frame
      join←{
          ⎕TRAP←(~debug)/⊂0 'C' '⎕SIGNAL⎕EN'
          ww←⍵⍵{⍺←⊢ ⋄ 3≠⎕NC'⍺⍺':⍺⍺ ⋄ ⍺ ⍺⍺ ⍵}⍥{⍵.labels}
          0=⎕NC'⍺':(ww f)series ⍺⍺(f←frame ⍵).values
          (a w)←frame¨⍺ ⍵ ⋄ al←a.labels~l←a ww w
          f←frame a[al],⍣(≢al)⊢w[l∩⍵.labels]
          frame ⍺⍺{
              ~(⊂l←⊂⍵.label)∧.∊(f a w).labels:⍵
              ⍵.label series a[;l]⍺⍺ ⍵[]
          }¨f[]
      }

:EndNamespace
